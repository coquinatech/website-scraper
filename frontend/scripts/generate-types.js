#!/usr/bin/env node

import { exec } from 'child_process';
import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { promisify } from 'util';

const execAsync = promisify(exec);
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Use server hostname in devcontainer, localhost otherwise
const SWAGGER_URL = process.env.DEVCONTAINER ? 'http://server:5000/documentation/json' : 'http://localhost:5000/documentation/json';
const OUTPUT_DIR = path.join(__dirname, '../src/api/generated');
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'mcp-types.ts');

async function generateTypes() {
  try {
    console.log('üîÑ Fetching OpenAPI schema from backend...');
    
    // Ensure output directory exists
    await fs.mkdir(OUTPUT_DIR, { recursive: true });
    
    // Generate types using openapi-typescript
    const command = `npx openapi-typescript ${SWAGGER_URL} -o ${OUTPUT_FILE}`;
    console.log(`üìù Running: ${command}`);
    
    const { stdout, stderr } = await execAsync(command);
    
    if (stderr && !stderr.includes('Warning')) {
      console.error('‚ùå Error generating types:', stderr);
      process.exit(1);
    }
    
    console.log('‚úÖ Types generated successfully!');
    console.log(`üìÅ Output: ${OUTPUT_FILE}`);
    
    // Add a header comment to the generated file
    const content = await fs.readFile(OUTPUT_FILE, 'utf-8');
    const headerComment = `/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 * Generated from: ${SWAGGER_URL}
 * Generated at: ${new Date().toISOString()}
 */

`;
    
    await fs.writeFile(OUTPUT_FILE, headerComment + content);
    
    console.log('‚ú® Type generation complete!');
  } catch (error) {
    console.error('‚ùå Failed to generate types:', error.message);
    console.error('Make sure the backend server is running at http://localhost:5000');
    process.exit(1);
  }
}

generateTypes();